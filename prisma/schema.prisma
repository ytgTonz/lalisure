generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  clerkId   String?  @unique // Optional for staff users who don't use Clerk
  email     String   @unique
  firstName String?
  lastName  String?
  phone     String?
  avatar    String?
  role      UserRole @default(CUSTOMER)
  password  String? // For staff authentication (hashed)

  // Extended Profile Information
  dateOfBirth DateTime?
  idNumber    String? // ID or Passport number
  idType      IdType? // ID or PASSPORT
  country     String?
  workPhone   String? // Optional work number

  // Address Information
  streetAddress String?
  city          String?
  province      String?
  postalCode    String?

  // Employment Details
  employmentStatus EmploymentStatus?
  employer         String?
  jobTitle         String?
  workAddress      String?

  // Income Details
  monthlyIncome Float?
  incomeSource  String?

  // Verification Status
  emailVerified Boolean @default(false)
  phoneVerified Boolean @default(false)
  idVerified    Boolean @default(false)

  // Stripe integration
  stripeCustomerId String?

  // Paystack integration
  paystackCustomerId String? // Paystack customer code

  // Notification preferences
  notificationPreferences NotificationPreferences?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  policies        Policy[]
  claims          Claim[]
  notifications   Notification[]
  sentInvitations Invitation[]   @relation("InvitationsSent")

  // Email template relations
  createdTemplates EmailTemplate[] @relation("TemplateCreator")
  updatedTemplates EmailTemplate[] @relation("TemplateUpdater")

  @@map("users")
}

model Policy {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  policyNumber String       @unique
  userId       String       @db.ObjectId
  type         PolicyType
  status       PolicyStatus @default(DRAFT)
  premium      Float
  coverage     Float
  deductible   Float
  startDate    DateTime
  endDate      DateTime

  // Policy details
  propertyInfo PropertyInfo
  personalInfo PersonalInfo?
  vehicleInfo  VehicleInfo?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  claims   Claim[]
  payments Payment[]

  @@map("policies")
}

model Claim {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  claimNumber String      @unique
  userId      String      @db.ObjectId
  policyId    String      @db.ObjectId
  type        ClaimType
  status      ClaimStatus @default(SUBMITTED)
  amount      Float?

  // Claim details
  description  String
  incidentDate DateTime
  location     String?
  what3words   String?

  // Documents
  documents Document[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  policy Policy @relation(fields: [policyId], references: [id], onDelete: Cascade)

  @@map("claims")
}

model Payment {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  policyId   String        @db.ObjectId
  stripeId   String?       @unique
  paystackId String? // Paystack transaction reference
  amount     Float
  currency   String        @default("zar")
  status     PaymentStatus @default(PENDING)
  type       PaymentType

  dueDate DateTime?
  paidAt  DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  policy Policy @relation(fields: [policyId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Document {
  id       String       @id @default(auto()) @map("_id") @db.ObjectId
  claimId  String       @db.ObjectId
  filename String
  url      String
  type     DocumentType
  size     Int
  mimeType String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  claim Claim @relation(fields: [claimId], references: [id], onDelete: Cascade)

  @@map("documents")
}

// Embedded types
type PropertyInfo {
  address          String
  city             String
  province         String
  postalCode       String
  propertyType     String // Single Family, Condo, Townhouse, etc.
  buildYear        Int
  squareFeet       Int
  bedrooms         Int?
  bathrooms        Float?
  constructionType String? // Frame, Brick, Stone, etc.
  roofType         String? // Shingle, Tile, Metal, etc.
  foundationType   String? // Concrete, Basement, Crawl Space, etc.
  heatingType      String? // Gas, Electric, Oil, etc.
  coolingType      String? // Central Air, Window Units, None, etc.
  safetyFeatures   String[] // Smoke Detectors, Security System, etc.
  hasPool          Boolean  @default(false)
  hasGarage        Boolean  @default(false)
  garageSpaces     Int?
}

type PersonalInfo {
  firstName      String?
  lastName       String?
  dateOfBirth    String?
  gender         String?
  height         Int?
  weight         Int?
  smokingStatus  String?
  medicalHistory String?
}

type VehicleInfo {
  make           String?
  model          String?
  year           Int?
  vin            String?
  mileage        Int?
  safetyFeatures String?
}

// Enums
enum UserRole {
  CUSTOMER
  AGENT
  ADMIN
  UNDERWRITER
}

enum PolicyType {
  HOME
}

enum PolicyStatus {
  DRAFT
  PENDING_REVIEW
  ACTIVE
  EXPIRED
  CANCELLED
  SUSPENDED
}

enum ClaimType {
  FIRE_DAMAGE
  WATER_DAMAGE
  STORM_DAMAGE
  THEFT_BURGLARY
  VANDALISM
  LIABILITY
  STRUCTURAL_DAMAGE
  ELECTRICAL_DAMAGE
  PLUMBING_DAMAGE
  OTHER
}

enum ClaimStatus {
  SUBMITTED
  UNDER_REVIEW
  INVESTIGATING
  APPROVED
  REJECTED
  SETTLED
}

enum IdType {
  ID
  PASSPORT
}

enum EmploymentStatus {
  EMPLOYED
  SELF_EMPLOYED
  UNEMPLOYED
  STUDENT
  RETIRED
  PENSIONER
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentType {
  PREMIUM
  DEDUCTIBLE
  CLAIM_PAYOUT
}

enum DocumentType {
  PHOTO
  RECEIPT
  POLICE_REPORT
  MEDICAL_REPORT
  ESTIMATE
  OTHER
}

// Email Template System for non-technical email management
model EmailTemplate {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique // Template identifier (e.g., "claim_submitted", "payment_confirmed")
  title       String // Display name (e.g., "Claim Submission Confirmation")
  subject     String // Email subject line
  htmlContent String // HTML email template
  textContent String? // Plain text version (optional)
  variables   String[] // List of available variables (e.g., ["userName", "policyNumber"])

  // Template metadata
  category  TemplateCategory @default(GENERAL)
  isActive  Boolean          @default(true)
  createdBy String           @db.ObjectId
  updatedBy String           @db.ObjectId

  // Relations
  creator User @relation("TemplateCreator", fields: [createdBy], references: [id])
  updater User @relation("TemplateUpdater", fields: [updatedBy], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("email_templates")
}

enum TemplateCategory {
  GENERAL
  CLAIMS
  PAYMENTS
  POLICIES
  INVITATIONS
  WELCOME
}

// Invitation system for role-based user creation
model Invitation {
  id     String           @id @default(auto()) @map("_id") @db.ObjectId
  email  String
  role   UserRole
  token  String           @unique
  status InvitationStatus @default(PENDING)

  // Who sent the invitation
  invitedBy String @db.ObjectId
  inviter   User   @relation("InvitationsSent", fields: [invitedBy], references: [id])

  // Optional organization/department info
  department String?
  message    String? // Personal message from inviter

  // Expiry and usage tracking
  expiresAt  DateTime
  acceptedAt DateTime?
  acceptedBy String?   @db.ObjectId // Reference to created user

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("invitations")
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}

// Notification system
model Notification {
  id      String           @id @default(auto()) @map("_id") @db.ObjectId
  userId  String           @db.ObjectId
  type    NotificationType
  title   String
  message String
  data    Json? // Additional data for the notification
  read    Boolean          @default(false)

  // Delivery channels
  emailSent Boolean @default(false)
  smsSent   Boolean @default(false)

  createdAt DateTime  @default(now())
  readAt    DateTime?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum NotificationType {
  POLICY_CREATED
  POLICY_RENEWED
  POLICY_EXPIRING
  CLAIM_SUBMITTED
  CLAIM_STATUS_UPDATE
  PAYMENT_DUE
  PAYMENT_CONFIRMED
  PAYMENT_FAILED
  WELCOME
  GENERAL
}

// Embedded notification preferences
type NotificationPreferences {
  email EmailNotificationSettings
  sms   SmsNotificationSettings
  push  PushNotificationSettings
}

type EmailNotificationSettings {
  enabled              Boolean @default(true)
  policyUpdates        Boolean @default(true)
  claimUpdates         Boolean @default(true)
  paymentReminders     Boolean @default(true)
  paymentConfirmations Boolean @default(true)
  marketingEmails      Boolean @default(false)
}

type SmsNotificationSettings {
  enabled            Boolean @default(false)
  urgentClaimUpdates Boolean @default(false)
  paymentReminders   Boolean @default(false)
  policyExpirations  Boolean @default(false)
}

type PushNotificationSettings {
  enabled          Boolean @default(true)
  policyUpdates    Boolean @default(true)
  claimUpdates     Boolean @default(true)
  paymentReminders Boolean @default(true)
}
